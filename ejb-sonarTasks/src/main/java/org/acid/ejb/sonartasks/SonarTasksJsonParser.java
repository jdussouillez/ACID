package org.acid.ejb.sonartasks;

import java.io.IOException;
import java.util.LinkedList;
import java.util.List;
import org.acid.ejb.entities.Task;
import org.json.simple.parser.ContentHandler;
import org.json.simple.parser.JSONParser;
import org.json.simple.parser.ParseException;

// https://code.google.com/p/json-simple/wiki/DecodingExamples
public class SonarTasksJsonParser implements ContentHandler {

    private final List<Task> tasks;
    private Task task;
    private String taskDescription;
    private boolean inIssues;
    private boolean inIssueKey;
    private boolean inIssuesArray;
    private boolean inIssueComponent;
    private boolean inIssueRule;
    private boolean inIssueSeverity;
    private boolean inIssueMessage;
    private boolean inIssueLine;
    private boolean inIssueDebt;

    private SonarTasksJsonParser() {
        tasks = new LinkedList<Task>();
    }

    public List<Task> getTasks() {
        return tasks;
    }

    public static List<Task> parse(String json) throws ParseException {
        SonarTasksJsonParser taskParser = new SonarTasksJsonParser();
        JSONParser parser = new JSONParser();
        parser.parse(json, taskParser);
        return taskParser.getTasks();
    }

    public void startJSON() throws ParseException, IOException {
    }

    public void endJSON() throws ParseException, IOException {
    }

    public boolean startObject() throws ParseException, IOException {
        return true;
    }

    public boolean endObject() throws ParseException, IOException {
        return true;
    }

    public boolean startObjectEntry(String key) throws ParseException, IOException {
        if (key.equals("issues")) {
            inIssues = true;
        }
        else if (key.equals("key")) {
            inIssueKey = true;
        }
        else if (key.equals("component")) {
            inIssueComponent = true;
        }
        else if (key.equals("rule")) {
            inIssueRule = true;
        }
        else if (key.equals("rules")) {
            inIssues = false;
        }
        else if (key.equals("severity")) {
            inIssueSeverity = true;
        }
        else if (key.equals("message")) {
            inIssueMessage = true;
        }
        else if (key.equals("line")) {
            inIssueLine = true;
        }
        else if (key.equals("debt")) {
            inIssueDebt = true;
        }
        return true;
    }

    public boolean endObjectEntry() throws ParseException, IOException {
        if (inIssueKey) {
            inIssueKey = false;
        }
        else if (inIssueComponent) {
            inIssueComponent = false;
        }
        else if (inIssueRule) {
            inIssueRule = false;
        }
        else if (inIssueSeverity) {
            inIssueSeverity = false;
        }
        else if (inIssueMessage) {
            inIssueMessage = false;
        }
        else if (inIssueLine) {
            inIssueLine = false;
        }
        else if (inIssueDebt) {
            inIssueDebt = false;
            task.setDescription(taskDescription);
            tasks.add(task);
        }
        return true;
    }

    public boolean startArray() throws ParseException, IOException {
        if (inIssues) {
            inIssuesArray = true;
        }
        return true;
    }

    public boolean endArray() throws ParseException, IOException {
        if (inIssues) {
            inIssuesArray = false;
        }
        return true;
    }

    public boolean primitive(Object content) throws ParseException, IOException {
        if (inIssuesArray) {
            if (inIssueKey) {
                task = new Task();
                task.setIdSonar(String.valueOf(content));
            }
            else if (inIssueComponent) {
                taskDescription = "-- Generated by SonarQube --\n";
                taskDescription += "File: " + content + "\n";
            }
            else if (inIssueRule) {
                taskDescription += "Rule: " + content + "\n";
            }
            else if (inIssueSeverity) {
                task.setPriority(sonarPriorityToInteger(String.valueOf(content)));
            }
            else if (inIssueMessage) {
                task.setLabel("Sonar: " + content);
                taskDescription += "Message: " + content + "\n";
            }
            else if (inIssueLine) {
                taskDescription += "Line: " + content + "\n";
            }
            else if (inIssueDebt) {
                taskDescription += "Debt: " + content + "\n";
            }
        }
        return true;
    }

    private int sonarPriorityToInteger(String priority) {
        if (priority.equals("BLOCKER")) {
            return 5;
        }
        if (priority.equals("CRITICAL")) {
            return 4;
        }
        if (priority.equals("MAJOR")) {
            return 3;
        }
        if (priority.equals("MINOR")) {
            return 2;
        }
        return priority.equals("INFO") ? 1 : 0;
    }
}
